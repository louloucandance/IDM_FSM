/*
 * generated by Xtext 2.12.0
 */
package fr.ice.m1.fsm.ide.contentassist.antlr;

import com.google.inject.Inject;
import fr.ice.m1.fsm.ide.contentassist.antlr.internal.InternalFSMParser;
import fr.ice.m1.fsm.services.FSMGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class FSMParser extends AbstractContentAssistParser {

	@Inject
	private FSMGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalFSMParser createParser() {
		InternalFSMParser result = new InternalFSMParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFSMAccess().getAlternatives_3(), "rule__FSM__Alternatives_3");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getTransitionAccess().getAlternatives_0(), "rule__Transition__Alternatives_0");
					put(grammarAccess.getFSMAccess().getGroup(), "rule__FSM__Group__0");
					put(grammarAccess.getFSMAccess().getGroup_3_0(), "rule__FSM__Group_3_0__0");
					put(grammarAccess.getFSMAccess().getGroup_3_1(), "rule__FSM__Group_3_1__0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getFSMAccess().getNameAssignment_2(), "rule__FSM__NameAssignment_2");
					put(grammarAccess.getFSMAccess().getStateAssignment_3_0_1(), "rule__FSM__StateAssignment_3_0_1");
					put(grammarAccess.getFSMAccess().getTransitionAssignment_3_1_1(), "rule__FSM__TransitionAssignment_3_1_1");
					put(grammarAccess.getStateAccess().getNameAssignment_1(), "rule__State__NameAssignment_1");
					put(grammarAccess.getTransitionAccess().getToAssignment_1(), "rule__Transition__ToAssignment_1");
					put(grammarAccess.getTransitionAccess().getFromAssignment_3(), "rule__Transition__FromAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FSMGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FSMGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
