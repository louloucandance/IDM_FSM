/*
 * generated by Xtext 2.12.0
 */
package fr.ice.m1.fsm.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import fr.ice.m1.fsm.model.FSM
import fr.ice.m1.fsm.model.State
import fr.ice.m1.fsm.model.Transition

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class FSMGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		var myfsm = resource.contents.get(0) as FSM
		
		fsa.generateFile('State.java', printStateClass)]
		myfsm.state.forEach[s | fsa.generateFile(s.name + '.java', s.print)]
		myfsm.transition.forEach[t | fsa.generateFile(t.name + '.java', t.print)]
	}
	
	def print(State s){
		'''
		public class « s.name » extends State{
			name     = "« s.name »";
			transOut = « s.outgoing »;
			transIn  = « s.incoming »;
		}
		'''
	}
	def print(Transition t){
		'''
		public class « t.name » extends Transition {
			name             = "« t.name »";
			stateOrigin      = « t.from »;
			stateDestination = « t.to »;
		}
		'''
	}
	def printTransitionClass(){
		'''
		public abstract class Transition {
			private String name;
			private From stateOrigin;
			private To stateDestination;
		}
		'''
	}
		def printStateClass(){
		'''
		public abstract class State {
			private String name;
			private Outgoing transOut;
			private Incoming transIn;
		}
		'''
	}
}
