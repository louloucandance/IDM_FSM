/*
 * generated by Xtext 2.12.0
 */
package fr.ice.m1.fsm.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import fr.ice.m1.fsm.model.FSM
import fr.ice.m1.fsm.model.State
import fr.ice.m1.fsm.model.Transition
import java.util.ArrayList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class FSMGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var myfsm = resource.contents.get(0) as FSM
		fsa.generateFile('State.java', printStateClass)
		val listState = newArrayList()
		myfsm.state.forEach[s | fsa.generateFile(s.name + '.java', s.print)
			listState.add(s.name)]
		fsa.generateFile('FSM.java', printFSMClass(listState))
		
	}
	//stocker les valeurs de s dans un tableau dans le foreach et le récupérer dans le FMS.
		def printFSMClass(ArrayList listState){
		val lengthState = listState.length()
		'''
		public class FSM{
			State actualState;
			
			public FSM(){
				actualState = new «listState.get(0)»();
			}
	
			public void on(){
				
				if(actualState instanceof «listState.get(1)»)
					actualState = new «listState.get(0)»();
			}
			
			public void off(){
				if(actualState instanceof «listState.get(0)»)
					actualState = new «listState.get(1)»();
			}
			
			public void stop(){
				actualState = new «listState.get(lengthState)»();
			}
			
			public static void main(){
				this.on();
				print actualState;
				this.off();
				print actualState;
				this.on();
				print actualState;
				this.off();
				print actualState;
				this.off();
				print actualState;
				this.on();
				print actualState;
				this.on();
				print actualState;
				this.stop();
				print actualState;
				this.off();
				print actualState;
				this.on();
				print actualState;
				
			}
		}
		'''
	} 
	def printFSMClass(){
		'''
		public class FSM{
			State actualState;
			
			public FSM(){
				actualState = new Open();
			}
	
			public void on(){
				
				if(actualState instanceof Close)
					actualState = new ;
			}
			
			public void off(){
				if(actualState instanceof Open)
					actualState = new Close();
			}
			
			public void stop(){
				actualState = new Down();
			}
			
			public static void main(){
				this.on();
				print actualState;
				this.off();
				print actualState;
				this.on();
				print actualState;
				this.off();
				print actualState;
				this.off();
				print actualState;
				this.on();
				print actualState;
				this.on();
				print actualState;
				this.stop();
				print actualState;
				this.off();
				print actualState;
				this.on();
				print actualState;
				
			}
		'''
	}
	
	def print(State s){
		var name = s.name;
		'''
		public class « name » extends State{
			public « name »(){
			name     = "« name »";
			transOut = out;
			transIn  = in;
			}
		public setName(String name){
			this.name = name;
			}		
		}
		'''
	}
	
	
		def printStateClass(){
		'''
		public abstract class State {
			private String name;
			private Outgoing transOut;
			private Incoming transIn;
		}
		
		@Override
		public String toString(){
			return this.name;
		}
		'''
	}
}
