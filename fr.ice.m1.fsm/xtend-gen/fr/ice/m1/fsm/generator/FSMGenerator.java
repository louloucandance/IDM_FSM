/**
 * generated by Xtext 2.12.0
 */
package fr.ice.m1.fsm.generator;

import fr.ice.m1.fsm.model.FSM;
import fr.ice.m1.fsm.model.State;
import java.util.ArrayList;
import java.util.function.Consumer;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class FSMGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    FSM myfsm = ((FSM) _get);
    fsa.generateFile("State.java", this.printStateClass());
    final ArrayList<String> listState = CollectionLiterals.<String>newArrayList();
    final Consumer<State> _function = (State s) -> {
      String _name = s.getName();
      String _plus = (_name + ".java");
      fsa.generateFile(_plus, this.print(s));
      listState.add(s.getName());
    };
    myfsm.getState().forEach(_function);
    fsa.generateFile("FSM.java", this.printFSMClass(listState));
  }
  
  public CharSequence printFSMClass(final ArrayList listState) {
    CharSequence _xblockexpression = null;
    {
      final int lengthState = ((Object[])Conversions.unwrapArray(listState, Object.class)).length;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("public class FSM{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("State actualState;");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public FSM(){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("actualState = new ");
      Object _get = listState.get(0);
      _builder.append(_get, "\t\t");
      _builder.append("();");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public void on(){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if(actualState instanceof ");
      Object _get_1 = listState.get(1);
      _builder.append(_get_1, "\t\t");
      _builder.append(")");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      _builder.append("actualState = new ");
      Object _get_2 = listState.get(0);
      _builder.append(_get_2, "\t\t\t");
      _builder.append("();");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public void off(){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if(actualState instanceof ");
      Object _get_3 = listState.get(0);
      _builder.append(_get_3, "\t\t");
      _builder.append(")");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      _builder.append("actualState = new ");
      Object _get_4 = listState.get(1);
      _builder.append(_get_4, "\t\t\t");
      _builder.append("();");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public void stop(){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("actualState = new ");
      Object _get_5 = listState.get(lengthState);
      _builder.append(_get_5, "\t\t");
      _builder.append("();");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public static void main(){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("this.on();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print actualState;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("this.off();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print actualState;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("this.on();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print actualState;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("this.off();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print actualState;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("this.off();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print actualState;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("this.on();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print actualState;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("this.on();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print actualState;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("this.stop();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print actualState;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("this.off();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print actualState;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("this.on();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print actualState;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  /**
   * def printFSMClass(){
   * '''
   * public class FSM{
   * State actualState;
   * 
   * public FSM(){
   * actualState = new Open();
   * }
   * 
   * public void on(){
   * 
   * if(actualState instanceof Close)
   * actualState = new ;
   * }
   * 
   * public void off(){
   * if(actualState instanceof Open)
   * actualState = new Close();
   * }
   * 
   * public void stop(){
   * actualState = new Down();
   * }
   * 
   * public static void main(){
   * this.on();
   * print actualState;
   * this.off();
   * print actualState;
   * this.on();
   * print actualState;
   * this.off();
   * print actualState;
   * this.off();
   * print actualState;
   * this.on();
   * print actualState;
   * this.on();
   * print actualState;
   * this.stop();
   * print actualState;
   * this.off();
   * print actualState;
   * this.on();
   * print actualState;
   * 
   * }
   * }
   * '''
   * }
   */
  public CharSequence print(final State s) {
    CharSequence _xblockexpression = null;
    {
      String name = s.getName();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("public class ");
      _builder.append(name);
      _builder.append(" extends State{");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("public ");
      _builder.append(name, "\t");
      _builder.append("(){");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("name     = \"");
      _builder.append(name, "\t");
      _builder.append("\";");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("transOut = out;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("transIn  = in;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("public setName(String name){");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("this.name = name;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}\t\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence printStateClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public abstract class State {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Outgoing transOut;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Incoming transIn;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("public String toString(){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return this.name;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
